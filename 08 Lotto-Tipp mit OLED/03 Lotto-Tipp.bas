SYMBOL OLED_WIDTH	= 128
SYMBOL OLED_MAX_X	= OLED_WIDTH - 1 ; 127
SYMBOL OLED_HEIGHT = 64
SYMBOL OLED_HEIGHT_LINES	= OLED_HEIGHT / 8 ; 8
SYMBOL OLED_MAX_Y	= OLED_HEIGHT_LINES - 1 ; 7
SYMBOL SSD1306_SETCONTRAST = 0x81
SYMBOL SSD1306_DISPLAYALLON_RESUME = 0xA4
SYMBOL SSD1306_DISPLAYALLON  = 0xA5
SYMBOL SSD1306_NORMALDISPLAY = 0xA6
SYMBOL SSD1306_INVERTDISPLAY = 0xA7
SYMBOL SSD1306_DISPLAYOFF = 0xAE
SYMBOL SSD1306_DISPLAYON = 0xAF	
SYMBOL SSD1306_SETDISPLAYOFFSET = 0xD3
SYMBOL SSD1306_SETCOMPINS = 0xDA	
SYMBOL SSD1306_SETVCOMDETECT = 0xDB	
SYMBOL SSD1306_SETDISPLAYCLOCKDIV = 0xD5
SYMBOL SSD1306_SETPRECHARGE = 0xD9
SYMBOL SSD1306_SETMULTIPLEX = 0xA8	
SYMBOL SSD1306_SETLOWCOLUMN = 0x00
SYMBOL SSD1306_SETHIGHCOLUMN = 0x10
SYMBOL SSD1306_SETSTARTLINE = 0x40
SYMBOL SSD1306_MEMORYMODE = 0x20
SYMBOL SSD1306_COLUMNADDR = 0x21
SYMBOL SSD1306_PAGEADDR = 0x22 ; Page 0-7 represents line 0 - 7
SYMBOL SSD1306_COMSCANINC = 0xC0
SYMBOL SSD1306_COMSCANDEC = 0xC8
SYMBOL SSD1306_SEGREMAP = 0xA0 | 1
SYMBOL SSD1306_CHARGEPUMP = 0x8D
SYMBOL SSD1306_EXTERNALVCC = 0x1
SYMBOL SSD1306_SWITCHCAPVCC = 0x2

SYMBOL SSD1306_ADDR  = 0x78 ; OLED I2C address

symbol PICAXE_SPEED = m16
symbol I2C_SPEED = i2cfast_16
symbol DELAY = 500*4 ; 4-times speed
symbol KEY_DEBOUNCE = 20 * 4 ; 4-times speed

#define KEY_IS_PRESSED pinC.3 = 1

symbol oled_x1 = b0
symbol oled_y1 = b1
symbol oled_x2 = b2
symbol oled_y2 = b3
symbol oledChar = b4
symbol counter = b5
symbol textAddr = b6
symbol textData = b7
symbol tempVarByte = b8
symbol ballValue = b9
symbol ballDigit = b10
symbol lottoValue1 = b12
symbol lottoValue2 = b13
symbol lottoValue3 = b14
symbol lottoValue4 = b15
symbol lottoValue5 = b16
symbol lottoValue6 = b17
symbol lottoValue = w10
symbol randomValue = w11


#macro OLED_CURSOR(x,y) ; x=column, y=line
oled_y1 = y
oled_x1 = x
oled_y2 = OLED_MAX_Y
oled_x2 = OLED_MAX_X
gosub oledWindow
#endmacro


#macro OLED_WINDOW(x1,y1,x2,y2) ; x1=start column, y1=start line
                                ; x2=end column,y2= end line
oled_y1 = y1
oled_x1 = x1
oled_y2 = y2
oled_x2 = x2
gosub oledWindow
#endmacro


#macro OLED_DATA(d) 
hi2cout (0x40, d)
#endmacro


#macro OLED_PRINT_LOTTOBALL(value,x,y)
oled_y1 = y
oled_x1 = x
ballValue = value
gosub oledPrintLottoBall
#endmacro


#macro OLED_PRINTCHAR(c)
oledChar = c - " "
gosub oledPrintChar
#endmacro


#macro OLED_PRINTTEXT(addr)
textAddr = addr
gosub oledPrintText
#endmacro


#macro GENERATE_LOTTO_VALUE(value)
gosub generateLottoValue
value = lottoValue
#endmacro

symbol CHAR_CODE_UE = 0x5B ; UE = ASCII 0x5B or 91

symbol EE_ADDR_TEXT0 = 0
EEPROM EE_ADDR_TEXT0,("LOTTOTIPP-GENERATOR", 0x00) ; 0x00 = end of text marker
symbol EE_ADDR_TEXT1 = 20
EEPROM EE_ADDR_TEXT1,("VIEL GL", CHAR_CODE_UE, "CK!", 0x00)

;-----------------------------------------------------------

setfreq PICAXE_SPEED
hi2csetup i2cmaster, SSD1306_ADDR, I2C_SPEED, i2cbyte
gosub oledInit
gosub oledClearDisplay
randomValue = 13 ; use 13 as seed for random

OLED_CURSOR(7, 0)
OLED_PRINTTEXT(EE_ADDR_TEXT0)
pause DELAY

OLED_PRINT_LOTTOBALL(6,7,2)
pause DELAY
OLED_WINDOW(48,3,79,4)
gosub oledPrint_aus
pause DELAY
OLED_PRINT_LOTTOBALL(49,89,2)
pause DELAY

OLED_CURSOR(32, 7)
OLED_PRINTTEXT(EE_ADDR_TEXT1)


main:

if KEY_IS_PRESSED then
   gosub oledClearDisplay

   lottoValue1 = 0xFF
   lottoValue2 = 0xFF
   lottoValue3 = 0xFF
   lottoValue4 = 0xFF
   lottoValue5 = 0xFF
   lottoValue6 = 0xFF
   gosub oledPrintAllLottoBalls
   
   pause KEY_DEBOUNCE
   do
      RANDOM randomValue
   loop while KEY_IS_PRESSED

   GENERATE_LOTTO_VALUE(lottoValue1)
   GENERATE_LOTTO_VALUE(lottoValue2)
   GENERATE_LOTTO_VALUE(lottoValue3)
   GENERATE_LOTTO_VALUE(lottoValue4)
   GENERATE_LOTTO_VALUE(lottoValue5)
   GENERATE_LOTTO_VALUE(lottoValue6)
   gosub oledPrintAllLottoBalls
endif

RANDOM randomValue

goto main


generateLottoValue:
   do
      RANDOM randomValue
      lottoValue = randomValue % 49 + 1
   loop while lottoValue = lottoValue1 or lottoValue = lottoValue2 _
           or lottoValue = lottoValue3 or lottoValue = lottoValue4 _
           or lottoValue = lottoValue5
return


oledPrintAllLottoBalls:
   OLED_PRINT_LOTTOBALL(lottoValue1,0,0)
   OLED_PRINT_LOTTOBALL(lottoValue2,18,4)
   OLED_PRINT_LOTTOBALL(lottoValue3,39,0)
   OLED_PRINT_LOTTOBALL(lottoValue4,57,4)
   OLED_PRINT_LOTTOBALL(lottoValue5,78,0)
   OLED_PRINT_LOTTOBALL(lottoValue6,96,4)
return


oledPrintLottoBall:
   oled_y2 = oled_y1 + 3
   oled_x2 = oled_x1 + 31
   OLED_WINDOW(oled_x1,oled_y1,oled_x2,oled_y2)
   gosub oledPrintEmptyBall
   if ballValue = 0xFF then
      return
   endif
   ballDigit = ballValue / 10
   if ballDigit <> 0 then
      ; 2 digits
      oled_y1 = oled_y1 + 1
      oled_x1 = oled_x1 + 4
      oled_y2 = oled_y1 + 1
      oled_x2 = oled_x1 + 10
      OLED_WINDOW(oled_x1,oled_y1,oled_x2,oled_y2)
      gosub oledPrintBallDigit
      oled_x1 = oled_x1 + 12
      oled_x2 = oled_x1 + 10
      OLED_WINDOW(oled_x1,oled_y1,oled_x2,oled_y2)
   else
      ; only 1 digit (ballValue < 10)
      oled_y1 = oled_y1 + 1
      oled_x1 = oled_x1 + 10
      oled_y2 = oled_y1 + 1
      oled_x2 = oled_x1 + 10
      OLED_WINDOW(oled_x1,oled_y1,oled_x2,oled_y2)
   endif
   ballDigit = ballValue % 10
   gosub oledPrintBallDigit
return


oledPrintBallDigit:
branch ballDigit,(oledPrintBall_0, oledPrintBall_1, oledPrintBall_2, oledPrintBall_3, oledPrintBall_4, oledPrintBall_5, oledPrintBall_6, oledPrintBall_7, oledPrintBall_8, oledPrintBall_9)
return


oledPrintEmptyBall: ; print empty ball
HI2COUT (0x40, _
0x00, 0x00, 0x00, 0x80, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x0C, 0x06, 0x06, 0x06, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x06, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0xFC, 0xE0, 0x07, 0x3F, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x60, 0x60, 0x60, 0x30, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00)
return


oledPrintBall_0:
HI2COUT (0x40, _
0xF0, 0xFC, 0x0C, 0x06, 0x06, 0x86, 0xC6, 0x66, 0x3C, 0xFC, 0xF0, 0x0F, 0x3F, 0x3C, 0x66, 0x63, 0x61, 0x60, 0x60, 0x30, 0x3F, 0x0F)
return


oledPrintBall_1:
HI2COUT (0x40, _
0x00, 0x00, 0x18, 0x18, 0x1C, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x7F, 0x7F, 0x60, 0x60, 0x60, 0x00)
return


oledPrintBall_2:
HI2COUT (0x40, _
0x38, 0x3C, 0x0E, 0x06, 0x06, 0x06, 0x86, 0xC6, 0xEE, 0x7C, 0x38, 0x60, 0x70, 0x78, 0x7C, 0x6E, 0x67, 0x63, 0x61, 0x60, 0x60, 0x60)
return


oledPrintBall_3:
HI2COUT (0x40, _
0x18, 0x1C, 0x0E, 0x86, 0x86, 0x86, 0x86, 0x86, 0xCE, 0xFC, 0x78, 0x18, 0x38, 0x70, 0x61, 0x61, 0x61, 0x61, 0x61, 0x73, 0x3E, 0x1C)
return


oledPrintBall_4:
HI2COUT (0x40, _
0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0xFE, 0xFE, 0x00, 0x00, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x7F, 0x7F, 0x06, 0x06)
return


oledPrintBall_5:
HI2COUT (0x40, _
0x7E, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x86, 0x06, 0x18, 0x38, 0x70, 0x60, 0x60, 0x60, 0x60, 0x60, 0x71, 0x3F, 0x1F)
return


oledPrintBall_6:
HI2COUT (0x40, _
0x80, 0xE0, 0xF0, 0xB8, 0x9C, 0x8E, 0x86, 0x86, 0x86, 0x00, 0x00, 0x1F, 0x3F, 0x73, 0x61, 0x61, 0x61, 0x61, 0x61, 0x73, 0x3F, 0x1E)
return


oledPrintBall_7:
HI2COUT (0x40, _
0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x86, 0xE6, 0x7E, 0x1E, 0x06, 0x00, 0x00, 0x00, 0x60, 0x78, 0x1E, 0x07, 0x01, 0x00, 0x00, 0x00)
return


oledPrintBall_8:
HI2COUT (0x40, _
0x00, 0x78, 0xFC, 0xCE, 0x86, 0x86, 0x86, 0xCE, 0xFC, 0x78, 0x00, 0x1E, 0x3F, 0x73, 0x61, 0x61, 0x61, 0x61, 0x61, 0x73, 0x3F, 0x1E)
return


oledPrintBall_9:
HI2COUT (0x40, _
0x78, 0xFC, 0xCE, 0x86, 0x86, 0x86, 0x86, 0x86, 0xCE, 0xFC, 0xF8, 0x00, 0x00, 0x61, 0x61, 0x61, 0x71, 0x39, 0x1D, 0x0F, 0x07, 0x01)
return


oledPrint_aus:
HI2COUT (0x40, _
0x00, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xE0, 0xC0, 0x00, 0x00, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0x00, 0x00, 0xC0, 0xE0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x40, 0x38, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7F, 0x7F, 0x00, 0x00, 0x1F, 0x3F, 0x70, 0x60, 0x60, 0x60, 0x60, 0x30, 0x7F, 0x7F, 0x00, 0x00, 0x23, 0x67, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x3C)
return


oledPrintText:
do
   read textAddr, textData
   if textData <> 0 then
      OLED_PRINTCHAR(textData)
      inc textAddr
   endif
loop while textData <> 0
return


oledPrintChar:
branch oledChar, ( _
char32, char33, noChar, noChar, noChar, noChar, noChar, noChar, noChar, noChar, noChar, noChar, noChar, char45, char46, char47, char_0, char_1, char_2, char_3, char_4, char_5, char_6, char_7, char_8, char_9, char58, char59, char60, char61, char62, char63, char64, char_A, char_B, char_C, char_D, char_E, char_F, char_G, char_H, char_I, char_J, char_K, char_L, char_M, char_N, char_O, char_P, char_Q, char_R, char_S, char_T, char_U, char_V, char_W, char_X, char_Y, char_Z, charUE)
goto char_end
char32: hi2cout (0x40, 0x00, 0x00, 0x00, 0x00, 0x00) : goto char_end ; Space
char33: hi2cout (0x40, 0x00, 0x00, 0x5F, 0x00, 0x00) : goto char_end ; !
;char34: hi2cout (0x40, 0x00, 0x07, 0x00, 0x07, 0x00) : goto char_end ; "
;char35: hi2cout (0x40, 0x14, 0x7F, 0x14, 0x7F, 0x14) : goto char_end ; #
;char36: hi2cout (0x40, 0x24, 0x2A, 0x7F, 0x2A, 0x12) : goto char_end ; $
;char37: hi2cout (0x40, 0x23, 0x13, 0x08, 0x64, 0x62) : goto char_end ; %
;char38: hi2cout (0x40, 0x36, 0x49, 0x56, 0x20, 0x50) : goto char_end ; &
;char39: hi2cout (0x40, 0x00, 0x08, 0x07, 0x03, 0x00) : goto char_end ; '
;char40: hi2cout (0x40, 0x00, 0x1C, 0x22, 0x41, 0x00) : goto char_end ; (
;char41: hi2cout (0x40, 0x00, 0x41, 0x22, 0x1C, 0x00) : goto char_end ; )
;char42: hi2cout (0x40, 0x2A, 0x1C, 0x7F, 0x1C, 0x2A) : goto char_end ; *
;char43: hi2cout (0x40, 0x08, 0x08, 0x3E, 0x08, 0x08) : goto char_end ; +
;char44: hi2cout (0x40, 0x00, 0x80, 0x70, 0x30, 0x00) : goto char_end ; ,
char45: hi2cout (0x40, 0x08, 0x08, 0x08, 0x08, 0x08) : goto char_end ; -
char46: hi2cout (0x40, 0x00, 0x00, 0x5F, 0x00, 0x00) : goto char_end ; .
char47: hi2cout (0x40, 0x20, 0x10, 0x08, 0x04, 0x02) : goto char_end ; /
char_0: hi2cout (0x40, 0x3E, 0x51, 0x49, 0x45, 0x3E) : goto char_end  ; 0
char_1: hi2cout (0x40, 0x00, 0x42, 0x7F, 0x40, 0x00) : goto char_end 	; 1
char_2: hi2cout (0x40, 0x72, 0x49, 0x49, 0x49, 0x46) : goto char_end  ; 2
char_3: hi2cout (0x40, 0x21, 0x41, 0x49, 0x4D, 0x33) : goto char_end  ; 3
char_4: hi2cout (0x40, 0x18, 0x14, 0x12, 0x7F, 0x10) : goto char_end  ; 4
char_5: hi2cout (0x40, 0x27, 0x45, 0x45, 0x45, 0x39) : goto char_end  ; 5
char_6: hi2cout (0x40, 0x3C, 0x4A, 0x49, 0x49, 0x31) : goto char_end  ; 6
char_7: hi2cout (0x40, 0x41, 0x21, 0x11, 0x09, 0x07) : goto char_end  ; 7
char_8: hi2cout (0x40, 0x36, 0x49, 0x49, 0x49, 0x36) : goto char_end  ; 8
char_9: hi2cout (0x40, 0x46, 0x49, 0x49, 0x29, 0x1E) : goto char_end  ; 9
char58: hi2cout (0x40, 0x00, 0x00, 0x14, 0x00, 0x00) : goto char_end ; :
char59: hi2cout (0x40, 0x00, 0x40, 0x34, 0x00, 0x00) : goto char_end ; ;
char60: hi2cout (0x40, 0x00, 0x08, 0x14, 0x22, 0x41) : goto char_end ; <
char61: hi2cout (0x40, 0x14, 0x14, 0x14, 0x14, 0x14) : goto char_end ; =
char62: hi2cout (0x40, 0x00, 0x41, 0x22, 0x14, 0x08) : goto char_end ; >
char63: hi2cout (0x40, 0x02, 0x01, 0x59, 0x09, 0x06) : goto char_end ; ?
char64: hi2cout (0x40, 0x3E, 0x41, 0x5D, 0x59, 0x4E) : goto char_end ; @
char_A: hi2cout (0x40, 0x7C, 0x12, 0x11, 0x12, 0x7C) : goto char_end  ; A
char_B: hi2cout (0x40, 0x7F, 0x49, 0x49, 0x49, 0x36) : goto char_end  ; B
char_C: hi2cout (0x40, 0x3E, 0x41, 0x41, 0x41, 0x22) : goto char_end  ; C
char_D: hi2cout (0x40, 0x7F, 0x41, 0x41, 0x41, 0x3E) : goto char_end  ; D
char_E: hi2cout (0x40, 0x7F, 0x49, 0x49, 0x49, 0x41) : goto char_end  ; E
char_F: hi2cout (0x40, 0x7F, 0x09, 0x09, 0x09, 0x01) : goto char_end  ; F
char_G: hi2cout (0x40, 0x3E, 0x41, 0x41, 0x51, 0x73) : goto char_end  ; G
char_H: hi2cout (0x40, 0x7F, 0x08, 0x08, 0x08, 0x7F) : goto char_end  ; H
char_I: hi2cout (0x40, 0x00, 0x41, 0x7F, 0x41, 0x00) : goto char_end  ; I
char_J: hi2cout (0x40, 0x20, 0x40, 0x41, 0x3F, 0x01) : goto char_end  ; J
char_K: hi2cout (0x40, 0x7F, 0x08, 0x14, 0x22, 0x41) : goto char_end  ; K
char_L: hi2cout (0x40, 0x7F, 0x40, 0x40, 0x40, 0x40) : goto char_end  ; L
char_M: hi2cout (0x40, 0x7F, 0x02, 0x1C, 0x02, 0x7F) : goto char_end  ; M
char_N: hi2cout (0x40, 0x7F, 0x04, 0x08, 0x10, 0x7F) : goto char_end  ; N
char_O: hi2cout (0x40, 0x3E, 0x41, 0x41, 0x41, 0x3E) : goto char_end  ; O
char_P: hi2cout (0x40, 0x7F, 0x09, 0x09, 0x09, 0x06) : goto char_end  ; P
char_Q: hi2cout (0x40, 0x3E, 0x41, 0x51, 0x21, 0x5E) : goto char_end  ; Q
char_R: hi2cout (0x40, 0x7F, 0x09, 0x19, 0x29, 0x46) : goto char_end  ; R
char_S: hi2cout (0x40, 0x26, 0x49, 0x49, 0x49, 0x32) : goto char_end  ; S
char_T: hi2cout (0x40, 0x03, 0x01, 0x7F, 0x01, 0x03) : goto char_end  ; T
char_U: hi2cout (0x40, 0x3F, 0x40, 0x40, 0x40, 0x3F) : goto char_end  ; U
char_V: hi2cout (0x40, 0x1F, 0x20, 0x40, 0x20, 0x1F) : goto char_end  ; V
char_W: hi2cout (0x40, 0x3F, 0x40, 0x38, 0x40, 0x3F) : goto char_end  ; W
char_X: hi2cout (0x40, 0x63, 0x14, 0x08, 0x14, 0x63) : goto char_end  ; X
char_Y: hi2cout (0x40, 0x03, 0x04, 0x78, 0x04, 0x03) : goto char_end  ; Y
char_Z: hi2cout (0x40, 0x61, 0x59, 0x49, 0x4D, 0x43) : goto char_end  ; Z
charUE: hi2cout (0x40, 0x3D, 0x40, 0x40, 0x40, 0x3D) : goto char_end  ; (UE)
noChar: goto char63
char_end:
hi2cout (0x40, 0x00) ; one blank column at the right end of the char
return


oledInit:
   hi2cout (0, SSD1306_DISPLAYOFF)            ; 0xAE
   hi2cout (0, SSD1306_SETDISPLAYCLOCKDIV)    ; 0xD5
   hi2cout (0, 0x80)                          ; the suggested ratio 0x80
   hi2cout (0, SSD1306_SETMULTIPLEX)          ; 0xA8
   hi2cout (0, 0x3F)
   hi2cout (0, SSD1306_SETDISPLAYOFFSET)      ; 0xD3
   hi2cout (0, 0x0)                           ; no offset
   hi2cout (0, SSD1306_SETSTARTLINE)          ; line #0
   hi2cout (0, SSD1306_CHARGEPUMP)            ; 0x8D
   hi2cout (0, 0x14)     						    ; INTERNAL VCC
   hi2cout (0, SSD1306_MEMORYMODE)            ; 0x20
   hi2cout (0, 0x00)                          ; Horiz mode. 0x0 act like ks0108
   hi2cout (0, SSD1306_SEGREMAP)
   hi2cout (0, SSD1306_COMSCANDEC)
   hi2cout (0, SSD1306_SETCOMPINS)            ; 0xDA
   hi2cout (0, 0x12)
   hi2cout (0, SSD1306_SETCONTRAST)           ; 0x81
   hi2cout (0, 0xCF)						          ; INTERNAL VCC
   hi2cout (0, SSD1306_SETPRECHARGE)          ; 0xD9
   hi2cout (0, 0xF1)						          ; INTERNAL VCC
   hi2cout (0, SSD1306_SETVCOMDETECT)         ; 0xDB
   hi2cout (0, 0x40)
   hi2cout (0, SSD1306_DISPLAYALLON_RESUME)   ; 0xA4
   hi2cout (0, SSD1306_DISPLAYON)         	 ; 0xAF	
return


oledWindow:
   hi2cout (0, SSD1306_PAGEADDR)
   hi2cout (0, oled_y1) ; set row
   hi2cout (0, oled_y2)
   hi2cout (0, SSD1306_COLUMNADDR)
   hi2cout (0, oled_x1) ; set column
   hi2cout (0, oled_x2)
return


oledClearDisplay:
   hi2cout (0, SSD1306_PAGEADDR)
   hi2cout (0, 0) ; set row 0
   hi2cout (0, OLED_MAX_Y) ; 7
   hi2cout (0, SSD1306_COLUMNADDR)
   hi2cout (0, 0) ; set column 0
   hi2cout (0, OLED_MAX_X) ; 127
   for tempVarByte = 1 to 32 ; 1024/32
   	hi2cout (0x40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
   next tempVarByte
return